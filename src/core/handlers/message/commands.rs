use crate::{domains, injected, lib};
use itertools::Itertools;

pub async fn admin_commands_handler(
    cx: &lib::types::MessageContext,
    domain_holder: &injected::DomainHolder,
) -> Result<(), anyhow::Error> {
    let lowercased_vec = cx.update
        .text()
        .unwrap()
        .split_whitespace()
        .map(str::to_lowercase)
        .collect_vec();
    let result = &lowercased_vec.iter().map(String::as_str).collect_vec()[..];

    let is_admin = lib::helpers::is_admin(&cx)
        .await
        .map_err(lib::errors::AdminCommandsControllerError::GetInfo)?;
    let chat_id = cx.update.chat_id();
    let chat_settings = domain_holder
        .chat
        .controller
        .get_chat_settings(cx)
        .await
        .map_err(anyhow::Error::new)?;

    match result {
        ["!help"] if !chat_settings.commands_for_admin_only || is_admin => {
            return lib::tg_helpers::reply_to(
                cx, "\
<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
<code>!help</code> ‚Äì –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<code>!report</code> ‚Äì —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞

<code>!ban</code> ‚Äì –±–∞–Ω –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

<code>!ro [time]</code> ‚Äì read-only mode –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–∏–º–µ—Ä, <code>!ro 1h</code>.
–í –∫–∞—á–µ—Å—Ç–≤–µ –µ–¥–∏–Ω–∏—Ü –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>s</code> | <code>m</code> | <code>h</code> | <code>d</code> —Å–µ–∫—É–Ω–¥—ã, –º–∏–Ω—É—Ç—ã, —á–∞—Å—ã, –¥–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
<i>–í–∞–∂–Ω–æ: –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —Å—Ä–æ–∫–∞ read-only –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥!</i>


<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞:</b>
<code>!settings</code>  ‚Äì —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞

<code>!disable_rating_count</code>  ‚Äì –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∏—Ä–∞—é—Ç—Å—è

<code>!enable_rating_count</code> ‚Äì –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–∫–ª—é—á—ë–Ω)

<code>!enable_commands_for_admin_only</code> ‚Äì –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞

<code>!disable_commands_for_admin_only</code> ‚Äì –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

<b>–†–µ–π—Ç–∏–Ω–≥:</b>
<code>!me</code> ‚Äì –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥

<code>!top</code> ‚Äì –≤—ã–≤–µ—Å—Ç–∏ —Ç–æ–ø-15 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É

<code>+</code> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–í–∞–ª–∏–¥–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã: <code>+</code>, <code>+1</code>, <code>+1.23</code>, <code>—Å–ø–∞—Å–∏–±–æ</code>, <code>—Å–ø—Å</code>, <code>–±–ª–∞–≥–æ–¥–∞—Ä—é</code>, <code>thanks</code>, <code>thx</code>, <code>thank you</code>, <code>üëç</code>

<code>-</code> (minus) ‚Äì —É–º–µ–Ω—å—à–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–í–∞–ª–∏–¥–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã: <code>-</code>, <code>-1</code>, <code>-1.23</code>, <code>üëé</code>

–¢–∞–∫–∂–µ —ç—Ç–æ—Ç –±–æ—Ç:
- –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å <a href='https://cas.chat'>CAS</a> –∏ –æ–±—â–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
- –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—â–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            ".to_string()
            )
                .await
        }
        ["!settings"] if is_admin => {
            domain_holder.admin_commands.controller.get_settings(cx, chat_settings).await
        }
        ["!report"] if !chat_settings.commands_for_admin_only => {
            domain_holder.admin_commands.controller.report(cx).await
        }
        ["!ban"] if lib::helpers::is_admin(&cx).await? => {
            domain_holder.admin_commands.controller.ban_user(cx).await
        }
        ["!ro", time] if lib::helpers::is_admin(&cx).await? => {
            domain_holder
                .admin_commands
                .controller
                .mute_user(cx, time)
                .await
        }
        ["!enable_rating_count"] if is_admin => {
            domain_holder
                .chat
                .controller
                .change_chat_settings(cx, domains::chat::ChatSettings{
                    chat_id,
                    is_rating_count: true,
                    commands_for_admin_only: chat_settings.commands_for_admin_only,
                })
                .await
        }
        ["!disable_rating_count"] if is_admin => {
            domain_holder
                .chat
                .controller
                .change_chat_settings(cx, domains::chat::ChatSettings {
                    chat_id,
                    is_rating_count: false,
                    commands_for_admin_only: chat_settings.commands_for_admin_only,
                })
                .await
        }
        ["!enable_commands_for_admin_only"] if is_admin => {
            domain_holder
                .chat
                .controller
                .change_chat_settings(cx, domains::chat::ChatSettings{
                    chat_id,
                    is_rating_count: chat_settings.is_rating_count,
                    commands_for_admin_only: true,
                })
                .await
        }
        ["!disable_commands_for_admin_only"] if is_admin => {
            domain_holder
                .chat
                .controller
                .change_chat_settings(cx, domains::chat::ChatSettings {
                    chat_id,
                    is_rating_count: chat_settings.is_rating_count,
                    commands_for_admin_only: false,
                })
                .await
        }
        _ => {Ok(())}
    }
        .map_err(|err| err.into())
}

pub async fn user_commands_handler(
    cx: &lib::types::MessageContext,
    domain_holder: &injected::DomainHolder,
)  -> Result<(), lib::errors::UserError> {
    let msg_text = cx.update.text().unwrap();
    let lowercased_vec = msg_text
        .split_whitespace()
        .map(str::to_lowercase)
        .collect_vec();
    let result = &lowercased_vec.iter().map(String::as_str).collect_vec()[..];

    if let Ok(chat_settings) = domain_holder.chat.controller.get_chat_settings(cx).await {
        let is_admin = lib::helpers::is_admin(&cx)
            .await
            .map_err(lib::errors::UserError::GetInfo)?;

        if (!chat_settings.commands_for_admin_only && chat_settings.is_rating_count) ||
            (chat_settings.commands_for_admin_only && chat_settings.is_rating_count && is_admin) {
            match result {
                ["!top"] => {
                    domain_holder
                        .user
                        .controller
                        .fetch_users_by_rating(cx)
                        .await?;
                }
                ["!me"] => {
                    domain_holder
                        .user
                        .controller
                        .get_info(cx)
                        .await?;
                }
                _ => { return Ok(()); }
            }
        }
    }

    Ok(())
}
